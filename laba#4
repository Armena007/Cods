#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>

// Базовый класс Product
class Product {
public:
    std::string name;
    double price;
    int quantity;

    Product(const std::string& name, double price, int quantity)
        : name(name), price(price), quantity(quantity) {}

    virtual void displayInfo() const {
        std::cout << "Название: " << name << ", Цена: " << price << ", Количество: " << quantity << std::endl;
    }
};

// Шаблонный класс Pair для связи характеристик продукта
template <typename T1, typename T2>
class Pair {
public:
    T1 first;
    T2 second;

    Pair(const T1& first, const T2& second) : first(first), second(second) {}
};

// Класс Clothing, наследуемый от базового класса Product
class Clothing : public Product {
public:
    Clothing(const std::string& name, double price, int quantity)
        : Product(name, price, quantity) {}

    void displayInfo() const override {
        std::cout << "[Одежда] ";
        Product::displayInfo();
    }
};

// Класс Electronics, наследуемый от базового класса Product
class Electronics : public Product {
public:
    Electronics(const std::string& name, double price, int quantity)
        : Product(name, price, quantity) {}

    void displayInfo() const override {
        std::cout << "[Электроника] ";
        Product::displayInfo();
    }
};

// Функция для сортировки продуктов по цене
void sortProductsByPrice(std::vector<Product>& products) {
    std::sort(products.begin(), products.end(), [](const Product& a, const Product& b) {
        return a.price < b.price;
    });
}

// Функция для добавления продукта
void addProduct(std::vector<Product>& products) {
    std::string name;
    double price;
    int quantity;
    std::cout << "Введите название продукта: ";
    std::cin >> name;
    std::cout << "Введите цену продукта: ";
    std::cin >> price;
    std::cout << "Введите количество продукта: ";
    std::cin >> quantity;

    // Пример создания объекта Clothing
    products.push_back(Clothing(name, price, quantity));
}

// Функция для поиска продукта
void searchProduct(const std::vector<Product>& products, const std::string& productName) {
    for (const auto& product : products) {
        if (product.name == productName) {
            product.displayInfo();
            return;
        }
    }
    std::cout << "Продукт не найден" << std::endl;
}

// Функция для сохранения данных в файл
void saveToFile(const std::vector<Product>& products, const std::string& filename) {
    std::ofstream file(filename);
    if (file.is_open()) {
        for (const auto& product : products) {
            file << product.name << " " << product.price << " " << product.quantity << std::endl;
        }
        file.close();
    } else {
        std::cout << "Ошибка открытия файла" << std::endl;
    }
}

// Основная программа
int main() {
    std::vector<Product> products;
    
    int choice;
    std::string productName;
    
    // Текстовое меню
    do {
        std::cout << "1. Добавить продукт\n"
                  << "2. Поиск продукта\n"
                  << "3. Сортировка продуктов по цене\n"
                  << "4. Сохранить данные в файл\n"
                  << "5. Выход\n";
        std::cout << "Выберите действие: ";
        std::cin >> choice;

        switch(choice) {
            case 1:
                addProduct(products);
                break;
            case 2:
                std::cout << "Введите название продукта для поиска: ";
                std::cin >> productName;
                searchProduct(products, productName);
                break;
            case 3:
                sortProductsByPrice(products);
                break;
            case 4:
                saveToFile(products, "output.txt");
                brea
k;
            case 5:
                std::cout << "Выход из программы\n";
                break;
            default:
                std::cout << "Некорректный выбор\n";
        }
    } while(choice != 5);

    return 0;
}
